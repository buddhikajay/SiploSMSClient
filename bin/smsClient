#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('SMSClient:server');
var http = require('http');
var Eureca = require('eureca.io');

//to execute commands
var sys = require('sys')
var exec = require('child_process').exec;

//monitor files
 var watch = require('watch');

function puts(error, stdout, stderr) { sys.puts(stdout) }


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//eureca

var eurecaClient = new Eureca.Client({ uri: 'http://siplo.lk:3000/' });
//var eurecaClient = new Eureca.Client({ uri: 'http://localhost:3000/' });


eurecaClient.exports.sendSMS = function (number,message)
{
  console.log('called sendSMS '+number+' '+message);
  exec("sendsms "+number+" \""+message+"\"", puts);
}

eurecaClient.ready(function (serverProxy) {
  serverProxy.initializeConnection();
});

//watch outgoing sms directory
// watch.watchTree('/var/spool/sms/outgoing', function (f, curr, prev) {
//     if (typeof f == "object" && prev === null && curr === null) {
//       // Finished walking the tree
//       console.log("Finished walking the tree");
//     } else if (prev === null) {
//       // f is a new file
//       console.log("f is a new file "+f);
//     } else if (curr.nlink === 0) {
//       // f was removed
//       console.log("f was removed "+f);
//     } else {
//       // f was changed
//       console.log("f was changed "+f);
//     }
// })

watch.createMonitor('/var/spool/sms/outgoing', function (monitor) {
    monitor.files['/var/spool/sms/outgoing/.zshrc'] // Stat object for my zshrc.
    monitor.on("created", function (f, stat) {
      console.log("outgoing: "+f);
    })
    monitor.on("changed", function (f, curr, prev) {
      // Handle file changes
      console.log("changed "+f);
    })
    monitor.on("removed", function (f, stat) {
      // Handle removed files
      console.log("removed "+f);
    })
   // monitor.stop(); // Stop watching
  })

//watch failed sms directory
watch.createMonitor('/var/spool/sms/failed', function (monitor) {
    monitor.files['/var/spool/sms/failed/.zshrc'] // Stat object for my zshrc.
    monitor.on("created", function (f, stat) {
      console.log("failed: "+f);
    })
    monitor.on("changed", function (f, curr, prev) {
      // Handle file changes
      console.log("changed "+f);
    })
    monitor.on("removed", function (f, stat) {
      // Handle removed files
      console.log("removed "+f);
    })
   // monitor.stop(); // Stop watching
  })

//watch sent sms directory
watch.createMonitor('/var/spool/sms/sent', function (monitor) {
    monitor.files['/var/spool/sms/sent/.zshrc'] // Stat object for my zshrc.
    monitor.on("created", function (f, stat) {
      console.log("sent: "+f);
    })
    monitor.on("changed", function (f, curr, prev) {
      // Handle file changes
      console.log("changed "+f);
    })
    monitor.on("removed", function (f, stat) {
      // Handle removed files
      console.log("removed "+f);
    })
   // monitor.stop(); // Stop watching
  })